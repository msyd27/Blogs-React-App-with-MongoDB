{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msyd2\\\\Documents\\\\Uni\\\\CPS 630\\\\Lab 2\\\\my-blog\\\\src\\\\Blog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Blog() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Define an async function to fetch data\n    const fetchData = async () => {\n      try {\n        // Fetch data from the server\n        const response = await fetch('http://localhost:3001/api/posts');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        setPosts(data); // Update the state with fetched data\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    // Call the fetchData function when the component mounts\n    fetchData();\n\n    // useEffect cleanup function (optional)\n    // This function will run when the component unmounts or before the effect runs again\n    return () => {\n      // Perform any cleanup tasks here if necessary\n    };\n  }, []); // Empty dependency array means this effect runs only once, similar to componentDidMount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(Blog, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Blog","_s","posts","setPosts","fetchData","response","fetch","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","content","id","_c","$RefreshReg$"],"sources":["C:/Users/msyd2/Documents/Uni/CPS 630/Lab 2/my-blog/src/Blog.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Blog() {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Define an async function to fetch data\r\n        const fetchData = async () => {\r\n            try {\r\n                // Fetch data from the server\r\n                const response = await fetch('http://localhost:3001/api/posts');\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch data');\r\n                }\r\n                const data = await response.json();\r\n                setPosts(data); // Update the state with fetched data\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        // Call the fetchData function when the component mounts\r\n        fetchData();\r\n\r\n        // useEffect cleanup function (optional)\r\n        // This function will run when the component unmounts or before the effect runs again\r\n        return () => {\r\n            // Perform any cleanup tasks here if necessary\r\n        };\r\n    }, []); // Empty dependency array means this effect runs only once, similar to componentDidMount\r\n\r\n    return (\r\n        <div>\r\n            <h2>Blog Posts</h2>\r\n            {posts.map((post) => (\r\n                <div key={post.id}>\r\n                    <h3>{post.title}</h3>\r\n                    <p>{post.content}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Blog;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZ,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;QAC/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QAC3C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;;IAED;IACAP,SAAS,CAAC,CAAC;;IAEX;IACA;IACA,OAAO,MAAM;MACT;IAAA,CACH;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIL,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBf,KAAK,CAACgB,GAAG,CAAEC,IAAI,iBACZpB,OAAA;MAAAc,QAAA,gBACId,OAAA;QAAAc,QAAA,EAAKM,IAAI,CAACC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBlB,OAAA;QAAAc,QAAA,EAAIM,IAAI,CAACE;MAAO;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFfE,IAAI,CAACG,EAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGZ,CACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAChB,EAAA,CAxCQD,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AA0Cb,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}